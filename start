#!/usr/bin/env bash

spinner()
{
  local pid=$1
  local delay=0.75
  local spinstr='|/-\'
  while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
    local temp=${spinstr#?}
    printf " [%c]  " "$spinstr"
    local spinstr=$temp${spinstr%"$temp"}
    sleep $delay
    printf "\b\b\b\b\b\b"
  done
  printf "    \b\b\b\b"
}

# Prompt and read a value from the terminal
GetValue() {
  typeset -r prompt=$1
  have_value=0
  while [ $have_value -eq 0 ]
  do
    read -p "$prompt: " VALUE
    [ ! -z "$VALUE" ] && have_value=1
  done
  echo "$VALUE"
}

GetEmail() {
  TSP_EMAIL=$(GetValue "Enter your E-mail")
}

GetApiToken() {
  TSP_API_TOKEN=$(GetValue "Enter your API Token")
}

GetApplicationId() {
  TSI_APP_ID=$(GetValue "Enter your Application Id")
}

#
# Get the required configuration
# from the user
GetConfiguration() {
  GetEmail
  GetApiToken
  GetApplicationId
}

VerifyConfiguration() {
  COLUMNS_SAVED=$COLUMNS
  COLUMNS=1
  active=1
  while [ $active -eq 1 ]
  do
    clear
#    echo "Enter 5 to provision the virtual machine; "
#    echo "Enter the number of configuration varible to edit; "
    echo "Make a selection:"
    select option in "Edit E-mail: $TSP_EMAIL" \
	    "Edit API Token: $TSP_API_TOKEN" \
	    "Edit Application Id: $TSI_APP_ID" \
	    "Quit and exit provisioning script" \
	    "Provision virtual machine"
    do
      case $REPLY in
        1) GetEmail ; break ;;
        2) GetApiToken ; break ;;
        3) GetApplicationId ; break ;;
        4) exit 0 ;;
        5) active=0 ; break ;;
      esac
    done
  done
  COLUMNS=$COLUMNS_SAVED
}

ExportConfiguration() {
  export TSP_EMAIL
  export TSP_API_TOKEN
  export TSP_API_HOST="api.truesight-staging.bmc.com"
  export TSI_APP_ID
}

ShowConfiguration()  {
  local prefix=$1
  echo "$prefix E-mail: $TSP_EMAIL"
  echo "$prefix API Token: $TSP_API_TOKEN"
  echo "$prefix Application Id: $TSI_APP_ID"
}

ConfirmConfiguration() {
:
}

CreateVirtualMachine() {
  # Clear the screen to remove clutter
  clear

  echo "Using the following configuration:"
  ShowConfiguration "  "
  echo -n "to provision virtual machine " 

  log_file="$PWD/vm_provisioning.log"
  echo "Virtual machine provisioning began at $(date)" >> $log_file
  ShowConfiguration >> $log_file

  (vagrant up 2>&1 >> "$log_file") &
  provisioning_pid=$1
  spinner $provisioning_pid

  echo "Virtual machine provisioning ended at $(date)" >> $log_file

  echo

  # Get the background process exit code
  wait $provisioning_pid
  result=$?

  # Indicate to the user the status of the provisioning
  if [ $result -eq 0 ]
  then
    echo "Virtual machine successfully provisioned"
    echo "Run 'vagrant ssh to login'"
  else
    echo "Virtual machine provisioning failed"
    echo "See $log_file for details"
  fi
}

GetConfiguration
VerifyConfiguration
ExportConfiguration
CreateVirtualMachine

