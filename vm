#!/usr/bin/env bash

# If LOG_FILE variable is not set then set to default
LOG_FILE="${LOG_FILE:="$PWD/vm.log"}"

# Global variables
PID=""
RUNNING=""

AbsolutePath() {
  echo "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
}

AbsoluteDir() {
  echo $(dirname AbsolutePath)
}

VirtualMachineStatus() {
  vm_status=$(vagrant status)
  case ${vm_status} in
  *"aborted"*) echo "ABORTED" ;;
  *"not created"*) echo "NOT_CREATED" ;;
  *"running"*) echo "RUNNING" ;;
  *"poweroff"*) echo "POWERED_OFF";;
  esac
}

VirtualMachineRunning() {
  typeset -i rc
  vm_status=$(VirtualMachineStatus)
  if [ "$vm_status" == "RUNNING" ]
  then
     rc=1
  else
     rc=0
  fi
  return ${rc}
}

DisplayCommandMenu() {
  # Preserve the current state of the COLUMNS
  # variable and set to 1 so that our menu shows
  # all options vertically
  save_columns=$COLUMNS

  COLUMNS=1
  select option in "Create" "Help" "Login" "Remove" "Restart" "Start" "Status" "Stop" "Update" "Version" "Quit"
  do
    case $REPLY in
      1) command="create"  ; break ;;
      2) command="help"    ; break ;;
      3) command="login"   ; break ;;
      4) command="remove"  ; break ;;
      5) command="restart" ; break ;;
      6) command="start"   ; break ;;
      7) command="start"   ; break ;;
      8) command="stop"    ; break ;;
      8) command="update"  ; break ;;
      8) command="version" ; break ;;
      9) command="quit"    ; break ;;
      *)                           ;;
    esac
  done

  # Restore the COLUMNS
  COLUMNS=${save_columns}

  # return the selected command
  echo ${command}
}


AlreadyProvisioned() {
  # Check to see if running
:
  # Okay not running, check to see if provisioned
}

spinner()
{
  local pid=$1
  local delay=0.75
  local spinstr='|/-\'
  while [ "$(ps a | awk '{print $1}' | grep ${pid})" ]; do
    local temp=${spinstr#?}
    printf " [%c]  " "$spinstr"
    local spinstr=${temp}${spinstr%"$temp"}
    sleep ${delay}
    printf "\b\b\b\b\b\b"
  done
  printf "    \b\b\b\b"
}


StopAndDestroy() {
  if [ ${RUNNING} -eq 1 ]
  then
    (kill -9 ${PID} 2>&1 >> "${LOG_FILE}")
    (vagrant destroy -f 2>&1 >> "${LOG_FILE}")
  fi
  echo
}

SigHandler() {
   StopAndDestroy
   exit 1
}

EnableSignalHandlers() {
   RUNNING=0
   for signal in "INT QUIT TERM"
   do
     trap "SigHandler ${signal}" ${signal}
   done
}

# Prompt and read a value from the terminal
GetValue() {
  typeset -r prompt=$1
  have_value=0
  while [ ${have_value} -eq 0 ]
  do
    read -p "$prompt: " VALUE
    [ ! -z "${VALUE}" ] && have_value=1
  done
  echo "${VALUE}"
}

GetEmail() {
  TSP_EMAIL=$(GetValue "Enter your E-mail")
}

GetApiToken() {
  TSP_API_TOKEN=$(GetValue "Enter your API Token")
}

GetApplicationId() {
  TSI_APP_ID=$(GetValue "Enter your Application Id")
}

# Get the required configuration from the user
GetConfiguration() {
  GetEmail
  GetApiToken
  GetApplicationId
}

VerifyConfiguration() {
  COLUMNS=1
  active=1
  while [ ${active} -eq 1 ]
  do
    clear
    echo "Create Virtual Machine:"
    select option in "Create Virtual Machine" \
              "Change E-mail: \"$TSP_EMAIL\"" \
              "Change API Token: \"$TSP_API_TOKEN\"" \
	      "Change Application Id: \"$TSI_APP_ID\"" \
	      "Quit"
    do
      case $REPLY in
        1) active=0         ; break ;;
        2) GetEmail         ; break ;;
        3) GetApiToken      ; break ;;
        4) GetApplicationId ; break ;;
        5) Quit                     ;;
      esac
    done
  done
}

ExportConfiguration() {
  export TSP_EMAIL
  export TSP_API_TOKEN
  export TSP_API_HOST="api.truesight-staging.bmc.com"
  export TSI_APP_ID
}

ShowConfiguration()  {
  local prefix=$1
  echo "$prefix E-mail: \"$TSP_EMAIL\""
  echo "$prefix API Token: \"$TSP_API_TOKEN\""
  echo "$prefix Application Id: \"$TSI_APP_ID\""
}

CreateVirtualMachine() {
  # Clear the screen to remove clutter
  clear

  echo "Using the following configuration:"
  ShowConfiguration "  "
  echo -n "to create virtual machine"

  echo "Virtual machine provisioning began at $(date)" >> "${LOG_FILE}"
  ShowConfiguration >> "${LOG_FILE}"

  # Set flag indicating the provisioning background
  # process is running
  RUNNING=1

  # Run the virtual machine provisioning as background process
  (vagrant up 2>&1 >> "${LOG_FILE}") &

  # Save a copy of the process id for later use
  PID=$!

  # Provide visual feedback that the provisioning process is running
  spinner ${PID}

  echo "Virtual machine provisioning ended at $(date)" >> "${LOG_FILE}"

  # Complete line from spinner
  echo

  # Get the background process exit code
  wait ${PID}
  vagrant status | grep "running" 2>&1 > /dev/null
  result=$?

  if [ ${result} -eq 0 ]
  then
    echo "Virtual machine successfully created"
    echo "Run './vm-login' to login"
  else
    echo "Virtual machine provisioning failed"
      echo "See ${LOG_FILE} for details"
  fi
}

BuildVirtualMachine() {

  # Enable signal handlers in case script is interrupted during creation
  EnableSignalHandlers

  # Prompt the user for required configuration
  GetConfiguration

  # Allow the user to view configuration and change if necessary
  VerifyConfiguration

  # Export the configuration through environment variables so they can be passed to vagrant
  ExportConfiguration

  # Call vagrant to create and provision the virtual machine
  CreateVirtualMachine
}

Login() {
  case $(VirtualMachineStatus) in
            NOT_CREATED) echo "Virtual machine not created, run 'vm-create'"         ;;
    POWERED_OFF|ABORTED) echo "Virtual machine not running, run 'vm-start' first"    ;;
                RUNNING) exec vagrant ssh                                            ;;
                      *) echo "Error logging into virtual machine run 'vm-restart' " ;;
  esac
}

Create() {
  case $(VirtualMachineStatus) in
            NOT_CREATED) BuildVirtualMachine                                         ;;
                RUNNING) echo "Virtual machine is running, run 'vm-login' to access" ;;
    ABORTED|POWERED_OFF) echo "Virtual machine already created, run 'vm-start'"      ;;
  esac
}

Remove() {
  case $(VirtualMachineStatus) in
                    NOT_CREATED) echo "Virtual machine is not created" ;;
    ABORTED|POWERED_OFF|RUNNING) vagrant destroy -f 2>&1 > /dev/null ;;
  esac
}

Restart() {
   Stop
   Start
}

Start() {
  case $(VirtualMachineStatus) in
            NOT_CREATED) echo "Virtual machine not created, run 'vm-create'"                  ;;
                RUNNING) echo "Virtual machine is already running, run 'vm-login' to access'" ;;
    ABORTED|POWERED_OFF) vagrant up 2>&1 > /dev/null                                          ;;
  esac
}

Status() {
  case $(VirtualMachineStatus) in
                RUNNING) echo "Virtual machine is running"     ;;
            NOT_CREATED) echo "Virtual machine is not created" ;;
    ABORTED|POWERED_OFF) echo "Virtual machine is stopped"     ;;
  esac
}

Stop() {
  case $(VirtualMachineStatus) in
                             RUNNING) vagrant halt 2>&1 > /dev/null || echo "Error stopping virtual machine" ;;
    ABORTED| NOT_CREATED|POWERED_OFF) echo "Virtual machine not running"                                     ;;
  esac
}

Update() {
   case $(VirtualMachineStatus) in
                              RUNNING)                                                                  ;;
                          NOT_CREATED) echo "Virtual Machine not created. Run './vm-create' first"      ;;
     ABORTED| NOT_CREATED|POWERED_OFF) echo "Virtual machine not running starting" ; vagrant up         ;;
   esac

   echo "Saving any changes"
   git stash

   echo "Updating virtual machine contents"
   git pull

   echo "Applying changes to virtual machine"
   vagrant provision
}

Version() {
  dir=$(AbsoluteDir)
  cat "$dir/docs/index.md" | grep version | tr -d '__' | tr -d [a-z] | tr -d ' '
}


Quit() {
  exit 0
}

BadCommand() {
  echo "${1} is not a valid command"
  Help
  exit 1
}

HelpCreate() {
  echo "Create"
  echo "======"
  echo "Builds a virtual machine"
}

HelpHelp() {
  echo "Help"
  echo "===="
  echo "    help - Displays this help"
}

HelpLogin() {
  echo "Login"
  echo "====="
  echo "Opens a command line to the virtual machine"
}

HelpRemove() {
  echo "Remove"
  echo "======"
  echo "Deletes the virtual machine"
}

HelpRestart() {
  echo "Restart"
  echo "======="
  echo "Starts and then stops the virtual machine"
}

HelpStart() {
  echo "Start"
  echo "====="
  echo "Turns off the virtual machine"
}

HelpStatus() {
  echo "Status"
  echo "======"
  echo "Current status of the virtual machine"
}

HelpStop() {
  echo "Stop"
  echo "===="
  echo "Turns on the virtual machine"
}

HelpUpdate() {
  echo "Update"
  echo "======"
  echo "Updates the virtual machine with latest content"
}

HelpVersion() {
  echo "Version"
  echo "======="
  echo "Displays the current version of the virtual machine"
}

Help() {
  topic="${1}"

  if [ -z "${topic}" ]
    then
    echo "Virtual Machine Management Tool"
    echo ""
    echo "Runs the following commands:"
    echo
    echo "  create - Builds a virtual machine"
    echo "    help - Displays this help"
    echo "   login - Opens a command line to the virtual machine"
    echo "  remove - Deletes the virtual machine"
    echo " restart - Starts and then stops the virtual machine"
    echo "   start - Turns off the virtual machine"
    echo "  status - Current status of the virtual machine"
    echo "    stop - Turns on the virtual machine"
    echo "  update - Updates the virtual machine with latest content"
    echo " version - Displays the current version of the virtual machine"
    echo ""
  else
    case ${topic} in
       create) HelpCreate  ;;
        login) HelpLogin   ;;
       remove) HelpRemove  ;;
      restart) HelpRestart ;;
        start) HelpStart   ;;
        start) HelpStatus  ;;
         stop) HelpStop    ;;
       update) HelpUpdate  ;;
      version) HelpVersion ;;
    esac
  fi
}

ExecuteCommand() {
  case $1 in
       create) Create             ;;
         help) Help "${2}"        ;;
        login) Login              ;;
       remove) Remove             ;;
      restart) Restart            ;;
        start) Start              ;;
       status) Status             ;;
         stop) Stop               ;;
       update) Update             ;;
      version) Version            ;;
         quit) Quit               ;;
            *) BadCommand  "${1}" ;;
  esac
}

# Assign the command passed on the command line if any
command=$1

# If not passed command then display a menu to the user and
# let them select a command from the menu
if [ -z ${command} ]
then
  echo "Virtual Machine Management Tool"
  command=$(DisplayCommandMenu)
fi

ExecuteCommand ${command} ${2}


